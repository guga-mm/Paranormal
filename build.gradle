plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
}

base {
	archivesName = project.archives_base_name
}

version = "$project.version+${libs.versions.minecraft.get()}"
group = project.maven_group

repositories {
	maven{
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
		content {
			includeGroup 'org.ladysnake'
			includeGroup 'io.github.ladysnake'
			includeGroup 'team.lodestar.lodestone'
		}
	}

	maven {
		name "modrinth"
		url "https://api.modrinth.com/maven"
		content {
			includeGroup('maven.modrinth')
		}
	}

	maven {
		name = 'BlameJared Maven (CrT / Bookshelf)'
		url = 'https://maven.blamejared.com'
	}

	//maven {
	//	name = 'GeckoLib'
	//	url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
	//}
}

loom {
	// Loom and Loader both use this block in order to gather more information about your mod.
	mods {
		// This should match your mod id.
		"paranormal" {
			// Tell Loom about each source set used by your mod here. This ensures that your mod's classes are properly transformed by Loader.
			sourceSet("main")
		}
	}

	runs {
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
		datagen {
			server()
			name = "Data Generation"
			runDir = "build/datagen"
			vmArg("-Dfabric-api.datagen")
			vmArg("-Dfabric-api.datagen.output-dir=${file("src/main/generated")}")
		}
	}
}

assemble.dependsOn(runDatagen)

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
	minecraft libs.minecraft

	mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }

	modImplementation libs.quilt.loader

	modImplementation libs.quilted.fabric.api

	implementation("foundry.veil:veil-common-${veil}") {
		exclude group: "maven.modrinth"
	}

	//modImplementation "software.bernie.geckolib:geckolib-quilt-${geckolib}"
}

processResources {
	inputs.properties 'version': version, 'group': project.group

	filesMatching('quilt.mod.json') {
		expand 'version': version, 'group': project.group
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 21
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from('LICENSE') {
		rename { "${it}_${base.archivesName.get()}" }
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}
